DROP TABLE IF EXISTS requests, comments, bookings, items, users;

CREATE TABLE IF NOT EXISTS users
(
    user_id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email     CHARACTER varying(512) NOT NULL,
    user_name CHARACTER varying(50),
    CONSTRAINT users_email_unq UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS items
(
    item_id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    owner_user_id   BIGINT,
    item_name       CHARACTER varying(50),
    description     CHARACTER varying(1024),
    available       boolean,
    request_id      BIGINT,
    CONSTRAINT items_to_users_fk
    FOREIGN KEY (owner_user_id)
        REFERENCES public.users (user_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.bookings
(
    booking_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    item_id bigint,
    booker_user_id bigint,
    date_from timestamp without time zone,
    date_end timestamp without time zone,
    status_id integer NOT NULL,
    CONSTRAINT bookings_to_items_fk
    FOREIGN KEY (item_id)
        REFERENCES public.items (item_id) ON DELETE CASCADE,
    CONSTRAINT bookings_to_users_fk
    FOREIGN KEY (booker_user_id)
            REFERENCES public.users (user_id) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS public.comments
(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    text text,
    item_id bigint,
    author_id bigint,
    created timestamp without time zone,
    CONSTRAINT comments_to_item_fk
        FOREIGN KEY (item_id) REFERENCES public.items (item_id)
        ON DELETE CASCADE,
    CONSTRAINT comments_to_user_fk
        FOREIGN KEY (author_id) REFERENCES public.users (user_id)
        ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS public.requests
(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description text NOT NULL,
    requester_id bigint NOT NULL,
    created timestamp without time zone,
	CONSTRAINT requests_to_users_fk
	    FOREIGN KEY (requester_id) REFERENCES public.users (user_id)
        ON DELETE CASCADE
);
